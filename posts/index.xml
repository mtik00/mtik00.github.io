<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mtik00</title>
    <link>https://mtik00.com/posts/</link>
    <description>Recent content in Posts on mtik00</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2015 20:57:46 -0600</lastBuildDate>
    <atom:link href="https://mtik00.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Testing Pipelined Static Content</title>
      <link>https://mtik00.com/2015/08/testing-pipelined-static-content/</link>
      <pubDate>Mon, 10 Aug 2015 20:57:46 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/testing-pipelined-static-content/</guid>
      <description>&lt;p&gt;After working quite hard on my &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; Hugo pipeline, I needed a way to test the actual content that will be pushed to the server.  Python (once again) to the rescue!&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; love Hugo&amp;rsquo;s built-in server.  &lt;code&gt;hugo serve --watch&lt;/code&gt; is truly a great time saver.  However, it has nothing to do with our pipeline (fingerprinting, compressing, etc).  If we want to see what the end result is going to look like, we need a way to serve that content.&lt;/p&gt;

&lt;p&gt;Python has many built-in packages.  That&amp;rsquo;s the main reason it&amp;rsquo;s my language of choice.  Python has a simple web server ready to go.  I use &lt;code&gt;hugo serve --watch&lt;/code&gt; when I&amp;rsquo;m creating my content.  When I want to check the output of my pipeline, I use the following on the command-line:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cd &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;path to content&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;m SimpleHTTPServer &lt;span style=&#34;color: #40a070&#34;&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt; tells Python to load the SimpleHTTPServer module and serve the content it finds in the current working directory on port 8000.  Technically, you are running &lt;code&gt;SimpleHTTPServer.__main__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The great thing about this is that I can run both the Python server and the Hugo server at the same time, depending on what I need.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the batch file I use for this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;@&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;off&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%~dp0&lt;/span&gt;..

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%1&lt;/span&gt;|findstr /xr &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &amp;gt;nul &amp;amp;&amp;amp; (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:python&lt;/span&gt;
) || (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:hugo&lt;/span&gt;
)

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: Run python on the already-built static pages.  This is for checking the end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: result of the pipeline to ensure everything worked.&lt;/span&gt;
&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:python&lt;/span&gt;
pushd mtik&lt;span style=&#34;color: #40a070&#34;&gt;00&lt;/span&gt;.github.io
start python -m SimpleHTTPServer &lt;span style=&#34;color: #40a070&#34;&gt;8000&lt;/span&gt;
popd
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: Clean the Hugo build directory, then call Hugo to serve the content&lt;/span&gt;
&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:hugo&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;EXIST&lt;/span&gt; build (
    rmdir /q /s build
    sleep &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;
)

start hugo server --watch --source&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt; --bind&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;

&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Post Date/Time with Python</title>
      <link>https://mtik00.com/2015/08/create-a-post-date-time-with-python/</link>
      <pubDate>Sun, 09 Aug 2015 21:07:30 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/create-a-post-date-time-with-python/</guid>
      <description>&lt;p&gt;I like to create draft posts as kind of &lt;em&gt;markers&lt;/em&gt; for things I want to write about in the future.  Unfortunately, when I do a &lt;code&gt;hugo new post...&lt;/code&gt;, the current date is already put in the front matter for me. That&amp;rsquo;s &lt;strong&gt;really&lt;/strong&gt; handy if I&amp;rsquo;m posting right away, but not so much if I have a &lt;em&gt;draft&lt;/em&gt; for a really long time.&lt;/p&gt;

&lt;p&gt;If you have Python installed on your system, here&amp;rsquo;s a quick one-liner to print out the current &lt;a href=&#34;https://docs.python.org/2/library/time.html?highlight=time.strftime#time.strftime&#34;&gt;date/time&lt;/a&gt; in Hugo&amp;rsquo;s (really Go&amp;rsquo;s) format:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;python &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;import time; print time.strftime(&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;T%H:%M:%S&amp;#39;, time.localtime()) + &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%+03i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;:00&amp;#39; % (-1*(time.altzone / 3600) if time.daylight else (-1*(time.timezone/3600)));&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I have that line wrapped in a batch file that I can run called &lt;code&gt;htime.bat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s quick and easy!  It&amp;rsquo;s &lt;em&gt;slightly&lt;/em&gt; easier than just changing it with your text editor.&lt;/p&gt;

&lt;p&gt;NOTE: This command only takes into consideration timezones that change on the hour!  Sorry &lt;a href=&#34;http://www.timeanddate.com/worldclock/india/new-delhi&#34;&gt;India&lt;/a&gt; (and more)&amp;hellip;&lt;/p&gt;

&lt;p&gt;UPDATE 8/10/2015: I just came across the &lt;a href=&#34;https://gohugo.io/commands/hugo_undraft/&#34;&gt;&lt;code&gt;hugo undraft&lt;/code&gt;&lt;/a&gt; command that does basically the same thing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nginx Proxy for GitHub Pages</title>
      <link>https://mtik00.com/2015/08/nginx-proxy-for-github-pages/</link>
      <pubDate>Sun, 02 Aug 2015 22:15:32 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/nginx-proxy-for-github-pages/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; is my favorite web server.  I find it &lt;em&gt;much&lt;/em&gt; easier to configure and use than Apache.  If you believe the hype, it&amp;rsquo;s also faster and consumes fewer resources.  That&amp;rsquo;s really not the point of this article, however.&lt;/p&gt;

&lt;p&gt;This point of this article is to show you how you configure Nginx on your server to serve static content that is actually served by GitHub pages.&lt;/p&gt;

&lt;h1 id=&#34;tl-dr:fae300191a56abce8a320c4057f8da61&#34;&gt;TL;DR&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;pages&lt;/code&gt; repo&lt;/li&gt;
&lt;li&gt;Clone it to your local computer&lt;/li&gt;
&lt;li&gt;Check in your static files&lt;/li&gt;
&lt;li&gt;Set up your Nginx configuration file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -am&amp;quot;...&amp;quot; &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;github-pages:fae300191a56abce8a320c4057f8da61&#34;&gt;GitHub Pages&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; alows users to store static web content (HTML, CSS, and JS) in specific repositories.  The only real caveat is that you must have &lt;code&gt;index.html&lt;/code&gt; in your repository root.  Of course, your files will also be public if you are using the free service.  This service is called &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.  &lt;a href=&#34;https://github.com/mtik00/mtik00.github.io&#34;&gt;Here is this blogs repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;content:fae300191a56abce8a320c4057f8da61&#34;&gt;Content&lt;/h1&gt;

&lt;p&gt;There are lots of ways to create your site.  I use &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; to generate the blog out of easy-to-generate Markdown files.  Nice and &lt;em&gt;relatively&lt;/em&gt; simple.  However you do it, you&amp;rsquo;ll need to be able to generate static content.&lt;/p&gt;

&lt;h1 id=&#34;nginx:fae300191a56abce8a320c4057f8da61&#34;&gt;Nginx&lt;/h1&gt;

&lt;p&gt;GitHub will serve up your pages to the web world just fine.  For this blog, you can go to &lt;a href=&#34;https://mtik00.github.io&#34;&gt;https://mtik00.github.io&lt;/a&gt; to browse it.  It looks the same as &lt;a href=&#34;https://mtik00.com&#34;&gt;https://mtik00.com&lt;/a&gt;, with the exception of the SSL key.  If you want users to go to your custom URL, and you want to manage your own SSL keys, you&amp;rsquo;ll need to set up an Nginx &lt;em&gt;proxy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you don&amp;rsquo;t care about SSL and only want a custom domain, read this instead: &lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&#34;&gt;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since your content is hosted on GitHub, you only need an Nginx configuration file that redirects.  Here&amp;rsquo;s the configuration that I use (without the SSL setup):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;server&lt;/span&gt; {
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;mtik00.com&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;443&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;ssl&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;spdy&lt;/span&gt;;

    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# The site is actually hosted on github pages.  Using this proxy location&lt;/span&gt;
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# allows us to secure the connection with our own SSL keys, instead of the&lt;/span&gt;
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# generic github.io SSL keys.&lt;/span&gt;

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;/&lt;/span&gt; {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;https://mtik00.github.io&lt;/span&gt;;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;proxy_intercept_errors&lt;/span&gt; &lt;span style=&#34;color: #60add5&#34;&gt;on&lt;/span&gt;;

        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# allow GitHub to pass caching headers instead of using our own&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;expires&lt;/span&gt; &lt;span style=&#34;color: #60add5&#34;&gt;off&lt;/span&gt;;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;magic&lt;/em&gt; happens when a user navigates to &lt;a href=&#34;https://mtik00.com/&#34;&gt;https://mtik00.com/&lt;/a&gt;.  When the happens, the &lt;code&gt;location /&lt;/code&gt; block matches, and all of the content is silently served from &lt;a href=&#34;http://mtik00.github.io&#34;&gt;http://mtik00.github.io&lt;/a&gt;.  How cool is that?&lt;/p&gt;

&lt;p&gt;Users will never know (nor will they care).&lt;/p&gt;

&lt;h1 id=&#34;why:fae300191a56abce8a320c4057f8da61&#34;&gt;Why&lt;/h1&gt;

&lt;p&gt;This might all seem a bit silly.  Really, if already have a web server running Nginx, why set up the proxy in the first place?  Why not just store your content on the server?  Well, the way I see it, this method has the following benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git commit -am&amp;quot;...&amp;quot; &amp;amp;&amp;amp; git push&lt;/code&gt; is all that&amp;rsquo;s needed to update your site&lt;/li&gt;
&lt;li&gt;Your content won&amp;rsquo;t take up any space on your web server&lt;/li&gt;
&lt;li&gt;You get to control your content entirely&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Only you can decide if it&amp;rsquo;s work it.  It is for me.  I can decide at any time to move the content off of GitHub, I can create new SSL keys as needed, and all I need to do to update is to &lt;code&gt;push&lt;/code&gt; the new pages back up to GitHub.&lt;/p&gt;

&lt;h1 id=&#34;folder-structure:fae300191a56abce8a320c4057f8da61&#34;&gt;Folder Structure&lt;/h1&gt;

&lt;p&gt;As I&amp;rsquo;ve mentioned before, I use Hugo to generate the static HTML files that are served by GitHub.  That, in itself, is a separate repository.  I started off with everything in the same repo.  It was a little odd, but it &lt;em&gt;wasn&amp;rsquo;t quite right&lt;/em&gt;.  My development files were in a folder called &lt;code&gt;dev&lt;/code&gt;, and the generated HTML files were in the repo root.  I decided to make things a little more complex to make the static html file repo cleaner.&lt;/p&gt;

&lt;p&gt;I currently have two projects:  1) My development files; 2) My GitHub pages static HTML files.  The trick here is that my GitHub pages repo is a &lt;em&gt;subtree&lt;/em&gt; located inside my other repo.  It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mtik00-pages/
mtik00-pages/mtik00.github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The base folder contains my development enviroment (batch files, python scripts, hugo binaries, etc).  The only thing &lt;code&gt;mtik00-pages/mtik00.github.com&lt;/code&gt; contains are HTML/CSS/JS files.  My normal process goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hugo new content/post&lt;/li&gt;
&lt;li&gt;edit the post in &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;SublimeText2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;commit the new content: &lt;code&gt;git add . &amp;amp;&amp;amp; git commit -am&amp;quot;adding new post&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;build the static pages:  &lt;code&gt;hugo -d&amp;quot;mtik00.github.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;deploy the static pages: &lt;code&gt;cd mtik00.github.com &amp;amp;&amp;amp; git add -A . &amp;amp;&amp;amp; git commit -am&amp;quot;new pages&amp;quot; &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Wordpress XML to Hugo MD</title>
      <link>https://mtik00.com/2015/07/wordpress-xml-to-hugo-md/</link>
      <pubDate>Thu, 30 Jul 2015 15:39:23 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/07/wordpress-xml-to-hugo-md/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve had a personal family blog in one form of another since 2002.  For the last 10 years, give or take, I used &lt;a href=&#34;https://wordpress.com/&#34;&gt;WordPress&lt;/a&gt;.  It&amp;rsquo;s a very fine and handy tool; especially for non-technical types.  That&amp;rsquo;s the real issue&amp;hellip; I&amp;rsquo;m a &lt;em&gt;technical type&lt;/em&gt;.  I started looking for something simpler, easier to maintain, and more secure.  That led me to &lt;em&gt;static site generators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into the details, but there &lt;a href=&#34;http://lmgtfy.com/?q=static+site+generators&#34;&gt;are a few to choose from&lt;/a&gt;.  I settled on &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.  I was mainly interested in it because it seemed easy, was written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;, and yes, it had a pretty website.&lt;/p&gt;

&lt;h1 id=&#34;the-conversion:689bb1f7ccd933f475db2ace11b77cea&#34;&gt;The Conversion&lt;/h1&gt;

&lt;p&gt;One of the many nice things about WordPress is the ability to export your site into XML (side note, I &lt;em&gt;loath&lt;/em&gt; XML).  There are some examples and script that do the conversion for you, but what fun would that be?  In the process, I learned that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Most HTML is Markdown compliant (that is, Markdown &amp;ldquo;understands&amp;rdquo; it)&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s hard to tell an HTML-to-MD converter exactly how you want the HTML parsed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On to the script!  &lt;a href=&#34;https://gist.github.com/mtik00/75c8f555b49365395e32&#34;&gt;You can view the script here.&lt;/a&gt;.  I won&amp;rsquo;t go over it in gory detail, but here are the basics.&lt;/p&gt;

&lt;p&gt;WP exports everything, but I was only concerned with the post &lt;code&gt;body&lt;/code&gt;, the date it was published (&lt;code&gt;pubDate&lt;/code&gt;), the &lt;code&gt;category&lt;/code&gt;&amp;rsquo;s (I called them &lt;code&gt;tags&lt;/code&gt; in the script), the &lt;code&gt;title&lt;/code&gt;, and where it should go.  The last part took some predetermined knowledge of how I wanted my Hugo site to be set up (read &lt;a href=&#34;http://gohugo.io/extras/permalinks/&#34;&gt;&lt;code&gt;[permalinks]&lt;/code&gt;&lt;/a&gt;).  If you look at the exported XML file, there are &lt;em&gt;lots&lt;/em&gt; of metadata that I&amp;rsquo;m ignoring (YMMV).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    tree &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parse(xml_path)
    channel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;)
    wp_version_check(channel)

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; channel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;):
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;post title:&amp;quot;&lt;/span&gt;, post&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;text
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;WP puts all of the posts in a &amp;lt;channel&amp;gt; element.  Each post is located inside an &amp;lt;item&amp;gt; element.  So far, so good!  Now all we need to do is to loop through each item and grab the data we need.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;wp_to_hugo_date&lt;/span&gt;(wp_date):
    &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Converts a UTC time string from the WordPress XML to a Hugo time string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;strptime(wp_date, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;%a, &lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; %b %Y %H:%M:%S +0000&amp;quot;&lt;/span&gt;)
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; calendar&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;timegm(date)
    ltime &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;localtime(date)
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;T%H:%M:%S&amp;quot;&lt;/span&gt;, ltime)

    date &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%+03i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;:00&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; (time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;altzone &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;3600&lt;/span&gt;) &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;daylight &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; (time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;timezone &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;3600&lt;/span&gt;)))
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; ltime, date
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using this function to convert the &lt;code&gt;pubDate&lt;/code&gt; from WordPress to the format that Hugo uses.  Nothing real special here, although I&amp;rsquo;m sure there&amp;rsquo;s a much better way to calculate the time zone.  The string-formatted &lt;code&gt;pubDate&lt;/code&gt; will go into the posts front matter, and I parse &lt;code&gt;ltime&lt;/code&gt; to figure out where the post should go.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the basics.  I ran this script on my entire WordPress XML dump (only 90+ pages, nothing too big).  It created all of the Markdown posts full of HTML.  It was up to me to then go in and adjust some of the HTML so it was rendered a little better by Hugo.  Most of my time spent was on downloading images, checking them into Git, and reworking the gallery posts to use my new template (which is awesome, because now I can use &lt;code&gt;{{ gallery path/to/gallery/folder }}&lt;/code&gt; in my markdown).&lt;/p&gt;

&lt;p&gt;The point is, however, I was able to have a fully functioning port of my WordPress blog to Hugo in a matter of hours (the script only took a second to run).  Woot!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>