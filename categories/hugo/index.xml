<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on mtik00</title>
    <link>https://mtik00.com/categories/hugo/</link>
    <description>Recent content in Hugo on mtik00</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Aug 2015 21:55:57 -0600</lastBuildDate>
    <atom:link href="https://mtik00.com/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django and Cripsy Form Login with Icons</title>
      <link>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</link>
      <pubDate>Sun, 30 Aug 2015 21:55:57 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</guid>
      <description>&lt;p&gt;I recently created a website using the very nice &lt;a href=&#34;http://django-edge.readthedocs.org/en/latest/&#34;&gt;Edge&lt;/a&gt; template for a new Django site.  The log in form was nice, but I wanted a form with icons and no labels.  Here&amp;rsquo;s how I did it&amp;hellip;&lt;/p&gt;

&lt;p&gt;The greatest thing is that this was a &lt;em&gt;super easy&lt;/em&gt; change.  I think it looks a lot nicer, to boot.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the old login page looked like:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-before.png&#34; alt=&#34;Default edge login template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I used the incredible &lt;a href=&#34;http://django-crispy-forms.readthedocs.org/en/d-0/layouts.html?highlight=prependedtext&#34;&gt;&lt;code&gt;PrependedText&lt;/code&gt;&lt;/a&gt; FormHelper item to add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt; icon before the field.  I had to set the field labels to empty-strings, as I:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Couldn&amp;rsquo;t figure out the &lt;code&gt;Field&lt;/code&gt; item to set inside &lt;code&gt;PrependedText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Couldn&amp;rsquo;t use &lt;code&gt;self.helper.form_show_labels = False&lt;/code&gt; because I needed it for the &lt;code&gt;remember_me&lt;/code&gt; field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the python code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color: #007020&#34;&gt;super&lt;/span&gt;(LoginForm, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;__init__(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;helper &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; FormHelper()
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;helper&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;layout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Layout(
            PrependedText(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;i class=&amp;quot;fa fa-envelope-o&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;, placeholder&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Enter Email Address&amp;quot;&lt;/span&gt;),
            PrependedText(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;i class=&amp;quot;fa fa-key&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;, placeholder&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Enter Password&amp;quot;&lt;/span&gt;),
            HTML(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;a href=&amp;quot;{}&amp;quot;&amp;gt;Forgot Password?&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(
                reverse(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;accounts:password-reset&amp;quot;&lt;/span&gt;))),
            Field(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;remember_me&amp;#39;&lt;/span&gt;),
            Submit(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sign_in&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Log in&amp;#39;&lt;/span&gt;,
                   css_class&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;btn btn-lg btn-primary btn-block&amp;quot;&lt;/span&gt;),
        )
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the new login form:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-after.png&#34; alt=&#34;New log in template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The is subtle, but effective!  (I think so, anyways)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Pipelined Static Content</title>
      <link>https://mtik00.com/2015/08/testing-pipelined-static-content/</link>
      <pubDate>Mon, 10 Aug 2015 20:57:46 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/testing-pipelined-static-content/</guid>
      <description>&lt;p&gt;After working quite hard on my &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; Hugo pipeline, I needed a way to test the actual content that will be pushed to the server.  Python (once again) to the rescue!&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; love Hugo&amp;rsquo;s built-in server.  &lt;code&gt;hugo serve --watch&lt;/code&gt; is truly a great time saver.  However, it has nothing to do with our pipeline (fingerprinting, compressing, etc).  If we want to see what the end result is going to look like, we need a way to serve that content.&lt;/p&gt;

&lt;p&gt;Python has many built-in packages.  That&amp;rsquo;s the main reason it&amp;rsquo;s my language of choice.  Python has a simple web server ready to go.  I use &lt;code&gt;hugo serve --watch&lt;/code&gt; when I&amp;rsquo;m creating my content.  When I want to check the output of my pipeline, I use the following on the command-line:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cd &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;path to content&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;m SimpleHTTPServer &lt;span style=&#34;color: #40a070&#34;&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt; tells Python to load the SimpleHTTPServer module and serve the content it finds in the current working directory on port 8000.  Technically, you are running &lt;code&gt;SimpleHTTPServer.__main__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The great thing about this is that I can run both the Python server and the Hugo server at the same time, depending on what I need.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the batch file I use for this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;@&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;off&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%~dp0&lt;/span&gt;..

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%1&lt;/span&gt;|findstr /xr &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &amp;gt;nul &amp;amp;&amp;amp; (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:python&lt;/span&gt;
) || (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:hugo&lt;/span&gt;
)

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: Run python on the already-built static pages.  This is for checking the end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: result of the pipeline to ensure everything worked.&lt;/span&gt;
&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:python&lt;/span&gt;
pushd mtik&lt;span style=&#34;color: #40a070&#34;&gt;00&lt;/span&gt;.github.io
start python -m SimpleHTTPServer &lt;span style=&#34;color: #40a070&#34;&gt;8000&lt;/span&gt;
popd
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: Clean the Hugo build directory, then call Hugo to serve the content&lt;/span&gt;
&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:hugo&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;EXIST&lt;/span&gt; build (
    rmdir /q /s build
    sleep &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;
)

start hugo server --watch --source&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt; --bind&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;:: =============================================================================&lt;/span&gt;

&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;:end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Post Date/Time with Python</title>
      <link>https://mtik00.com/2015/08/create-a-post-date-time-with-python/</link>
      <pubDate>Sun, 09 Aug 2015 21:07:30 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/create-a-post-date-time-with-python/</guid>
      <description>&lt;p&gt;I like to create draft posts as kind of &lt;em&gt;markers&lt;/em&gt; for things I want to write about in the future.  Unfortunately, when I do a &lt;code&gt;hugo new post...&lt;/code&gt;, the current date is already put in the front matter for me. That&amp;rsquo;s &lt;strong&gt;really&lt;/strong&gt; handy if I&amp;rsquo;m posting right away, but not so much if I have a &lt;em&gt;draft&lt;/em&gt; for a really long time.&lt;/p&gt;

&lt;p&gt;If you have Python installed on your system, here&amp;rsquo;s a quick one-liner to print out the current &lt;a href=&#34;https://docs.python.org/2/library/time.html?highlight=time.strftime#time.strftime&#34;&gt;date/time&lt;/a&gt; in Hugo&amp;rsquo;s (really Go&amp;rsquo;s) format:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;python &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;import time; print time.strftime(&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;T%H:%M:%S&amp;#39;, time.localtime()) + &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%+03i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;:00&amp;#39; % (-1*(time.altzone / 3600) if time.daylight else (-1*(time.timezone/3600)));&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I have that line wrapped in a batch file that I can run called &lt;code&gt;htime.bat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s quick and easy!  It&amp;rsquo;s &lt;em&gt;slightly&lt;/em&gt; easier than just changing it with your text editor.&lt;/p&gt;

&lt;p&gt;NOTE: This command only takes into consideration timezones that change on the hour!  Sorry &lt;a href=&#34;http://www.timeanddate.com/worldclock/india/new-delhi&#34;&gt;India&lt;/a&gt; (and more)&amp;hellip;&lt;/p&gt;

&lt;p&gt;UPDATE 8/10/2015: I just came across the &lt;a href=&#34;https://gohugo.io/commands/hugo_undraft/&#34;&gt;&lt;code&gt;hugo undraft&lt;/code&gt;&lt;/a&gt; command that does basically the same thing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wordpress XML to Hugo MD</title>
      <link>https://mtik00.com/2015/07/wordpress-xml-to-hugo-md/</link>
      <pubDate>Thu, 30 Jul 2015 15:39:23 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/07/wordpress-xml-to-hugo-md/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve had a personal family blog in one form of another since 2002.  For the last 10 years, give or take, I used &lt;a href=&#34;https://wordpress.com/&#34;&gt;WordPress&lt;/a&gt;.  It&amp;rsquo;s a very fine and handy tool; especially for non-technical types.  That&amp;rsquo;s the real issue&amp;hellip; I&amp;rsquo;m a &lt;em&gt;technical type&lt;/em&gt;.  I started looking for something simpler, easier to maintain, and more secure.  That led me to &lt;em&gt;static site generators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into the details, but there &lt;a href=&#34;http://lmgtfy.com/?q=static+site+generators&#34;&gt;are a few to choose from&lt;/a&gt;.  I settled on &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.  I was mainly interested in it because it seemed easy, was written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;, and yes, it had a pretty website.&lt;/p&gt;

&lt;h1 id=&#34;the-conversion:689bb1f7ccd933f475db2ace11b77cea&#34;&gt;The Conversion&lt;/h1&gt;

&lt;p&gt;One of the many nice things about WordPress is the ability to export your site into XML (side note, I &lt;em&gt;loath&lt;/em&gt; XML).  There are some examples and script that do the conversion for you, but what fun would that be?  In the process, I learned that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Most HTML is Markdown compliant (that is, Markdown &amp;ldquo;understands&amp;rdquo; it)&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s hard to tell an HTML-to-MD converter exactly how you want the HTML parsed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On to the script!  &lt;a href=&#34;https://gist.github.com/mtik00/75c8f555b49365395e32&#34;&gt;You can view the script here.&lt;/a&gt;.  I won&amp;rsquo;t go over it in gory detail, but here are the basics.&lt;/p&gt;

&lt;p&gt;WP exports everything, but I was only concerned with the post &lt;code&gt;body&lt;/code&gt;, the date it was published (&lt;code&gt;pubDate&lt;/code&gt;), the &lt;code&gt;category&lt;/code&gt;&amp;rsquo;s (I called them &lt;code&gt;tags&lt;/code&gt; in the script), the &lt;code&gt;title&lt;/code&gt;, and where it should go.  The last part took some predetermined knowledge of how I wanted my Hugo site to be set up (read &lt;a href=&#34;http://gohugo.io/extras/permalinks/&#34;&gt;&lt;code&gt;[permalinks]&lt;/code&gt;&lt;/a&gt;).  If you look at the exported XML file, there are &lt;em&gt;lots&lt;/em&gt; of metadata that I&amp;rsquo;m ignoring (YMMV).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    tree &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ET&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parse(xml_path)
    channel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; tree&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;)
    wp_version_check(channel)

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; channel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;):
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;post title:&amp;quot;&lt;/span&gt;, post&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;text
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;WP puts all of the posts in a &amp;lt;channel&amp;gt; element.  Each post is located inside an &amp;lt;item&amp;gt; element.  So far, so good!  Now all we need to do is to loop through each item and grab the data we need.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;wp_to_hugo_date&lt;/span&gt;(wp_date):
    &lt;span style=&#34;color: #4070a0; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Converts a UTC time string from the WordPress XML to a Hugo time string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;strptime(wp_date, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;%a, &lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; %b %Y %H:%M:%S +0000&amp;quot;&lt;/span&gt;)
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; calendar&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;timegm(date)
    ltime &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;localtime(date)
    date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;T%H:%M:%S&amp;quot;&lt;/span&gt;, ltime)

    date &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%+03i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;:00&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; (time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;altzone &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;3600&lt;/span&gt;) &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;daylight &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; (time&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;timezone &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;3600&lt;/span&gt;)))
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; ltime, date
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using this function to convert the &lt;code&gt;pubDate&lt;/code&gt; from WordPress to the format that Hugo uses.  Nothing real special here, although I&amp;rsquo;m sure there&amp;rsquo;s a much better way to calculate the time zone.  The string-formatted &lt;code&gt;pubDate&lt;/code&gt; will go into the posts front matter, and I parse &lt;code&gt;ltime&lt;/code&gt; to figure out where the post should go.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the basics.  I ran this script on my entire WordPress XML dump (only 90+ pages, nothing too big).  It created all of the Markdown posts full of HTML.  It was up to me to then go in and adjust some of the HTML so it was rendered a little better by Hugo.  Most of my time spent was on downloading images, checking them into Git, and reworking the gallery posts to use my new template (which is awesome, because now I can use &lt;code&gt;{{ gallery path/to/gallery/folder }}&lt;/code&gt; in my markdown).&lt;/p&gt;

&lt;p&gt;The point is, however, I was able to have a fully functioning port of my WordPress blog to Hugo in a matter of hours (the script only took a second to run).  Woot!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>