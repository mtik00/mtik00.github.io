<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on mtik00</title>
    <link>https://mtik00.com/categories/web/</link>
    <description>Recent content in Web on mtik00</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Aug 2015 21:55:57 -0600</lastBuildDate>
    <atom:link href="https://mtik00.com/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django and Cripsy Form Login with Icons</title>
      <link>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</link>
      <pubDate>Sun, 30 Aug 2015 21:55:57 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</guid>
      <description>&lt;p&gt;I recently created a website using the very nice &lt;a href=&#34;http://django-edge.readthedocs.org/en/latest/&#34;&gt;Edge&lt;/a&gt; template for a new Django site.  The log in form was nice, but I wanted a form with icons and no labels.  Here&amp;rsquo;s how I did it&amp;hellip;&lt;/p&gt;

&lt;p&gt;The greatest thing is that this was a &lt;em&gt;super easy&lt;/em&gt; change.  I think it looks a lot nicer, to boot.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the old login page looked like:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-before.png&#34; alt=&#34;Default edge login template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I used the incredible &lt;a href=&#34;http://django-crispy-forms.readthedocs.org/en/d-0/layouts.html?highlight=prependedtext&#34;&gt;&lt;code&gt;PrependedText&lt;/code&gt;&lt;/a&gt; FormHelper item to add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt; icon before the field.  I had to set the field labels to empty-strings, as I:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Couldn&amp;rsquo;t figure out the &lt;code&gt;Field&lt;/code&gt; item to set inside &lt;code&gt;PrependedText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Couldn&amp;rsquo;t use &lt;code&gt;self.helper.form_show_labels = False&lt;/code&gt; because I needed it for the &lt;code&gt;remember_me&lt;/code&gt; field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the python code:

    def __init__(self, *args, **kwargs):
        super(LoginForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.fields[&#34;username&#34;].label = &#34;&#34;
        self.fields[&#34;password&#34;].label = &#34;&#34;
        self.helper.layout = Layout(
            PrependedText(&#39;username&#39;, &#39;&lt;i class=&#34;fa fa-envelope-o&#34;&gt;&lt;/i&gt;&#39;, placeholder=&#34;Enter Email Address&#34;),
            PrependedText(&#39;password&#39;, &#39;&lt;i class=&#34;fa fa-key&#34;&gt;&lt;/i&gt;&#39;, placeholder=&#34;Enter Password&#34;),
            HTML(&#39;&lt;a href=&#34;{}&#34;&gt;Forgot Password?&lt;/a&gt;&#39;.format(
                reverse(&#34;accounts:password-reset&#34;))),
            Field(&#39;remember_me&#39;),
            Submit(&#39;sign_in&#39;, &#39;Log in&#39;,
                   css_class=&#34;btn btn-lg btn-primary btn-block&#34;),
        )
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the new login form:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-after.png&#34; alt=&#34;New log in template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The is subtle, but effective!  (I think so, anyways)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Pipelined Static Content</title>
      <link>https://mtik00.com/2015/08/testing-pipelined-static-content/</link>
      <pubDate>Mon, 10 Aug 2015 20:57:46 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/testing-pipelined-static-content/</guid>
      <description>&lt;p&gt;After working quite hard on my &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; Hugo pipeline, I needed a way to test the actual content that will be pushed to the server.  Python (once again) to the rescue!&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; love Hugo&amp;rsquo;s built-in server.  &lt;code&gt;hugo serve --watch&lt;/code&gt; is truly a great time saver.  However, it has nothing to do with our pipeline (fingerprinting, compressing, etc).  If we want to see what the end result is going to look like, we need a way to serve that content.&lt;/p&gt;

&lt;p&gt;Python has many built-in packages.  That&amp;rsquo;s the main reason it&amp;rsquo;s my language of choice.  Python has a simple web server ready to go.  I use &lt;code&gt;hugo serve --watch&lt;/code&gt; when I&amp;rsquo;m creating my content.  When I want to check the output of my pipeline, I use the following on the command-line:&lt;/p&gt;

&lt;p&gt;
cd &lt;path to content&gt; &amp;&amp; python -m SimpleHTTPServer 8000
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt; tells Python to load the SimpleHTTPServer module and serve the content it finds in the current working directory on port 8000.  Technically, you are running &lt;code&gt;SimpleHTTPServer.__main__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The great thing about this is that I can run both the Python server and the Hugo server at the same time, depending on what I need.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the batch file I use for this:

@echo off
cd %~dp0..

echo %1|findstr /xr &#34;p&#34; &gt;nul &amp;&amp; (
  goto :python
) || (
  goto :hugo
)

:: =============================================================================
:: Run python on the already-built static pages.  This is for checking the end
:: result of the pipeline to ensure everything worked.
:python
pushd mtik00.github.io
start python -m SimpleHTTPServer 8000
popd
goto :end
:: =============================================================================

:: =============================================================================
:: Clean the Hugo build directory, then call Hugo to serve the content
:hugo
IF EXIST build (
    rmdir /q /s build
    sleep 1
)

start hugo server --watch --source=&#34;site&#34; --bind=&#34;localhost&#34;
goto :end
:: =============================================================================

:end
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>