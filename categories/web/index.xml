<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on mtik00</title>
    <link>https://mtik00.com/categories/web/</link>
    <description>Recent content in Web on mtik00</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Nov 2017 10:10:08 -0700</lastBuildDate>
    <atom:link href="https://mtik00.com/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cloudflare with GitHub Pages</title>
      <link>https://mtik00.com/2017/11/cloudflare-with-github-pages/</link>
      <pubDate>Mon, 06 Nov 2017 10:10:08 -0700</pubDate>
      
      <guid>https://mtik00.com/2017/11/cloudflare-with-github-pages/</guid>
      <description>

&lt;p&gt;I recently changed my GitHub pages setup to incorporate the use of CloudFlare,
because, why not?&lt;/p&gt;

&lt;p&gt;NOTE: If you don&amp;rsquo;t have a domain, or don&amp;rsquo;t care about CDN/Caching, the
instructions below are pointless!  Just point people to
&lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;!&lt;/p&gt;

&lt;h1 id=&#34;why:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Why&lt;/h1&gt;

&lt;p&gt;In my &lt;a href=&#34;https://mtik00.com/2015/08/nginx-proxy-for-github-pages/&#34;&gt;
Nginx Proxy for GitHub Pages&lt;/a&gt; post, I explained how
to set up your own web server using Nginx and Let&amp;rsquo;s Encrypt to provide your
own SSL certificate and proxy requests to GitHub.  This is fine, but it still
adds a layer of complexity and requires your own VPS for set up.&lt;/p&gt;

&lt;p&gt;I was recently poking around CloudFlare.  I found out that they have a &lt;em&gt;free&lt;/em&gt;
tier that supports all kinds of neat things.  This includes a &lt;em&gt;shared&lt;/em&gt; SSL
certificate (perfectly fine for GitHub Pages content), CDN, DNS, and of course
caching.  I&amp;rsquo;m always up for a &lt;em&gt;free&lt;/em&gt; introduction to new-to-me technologies.&lt;/p&gt;

&lt;p&gt;Personally, the biggest benefit is that I no longer have to deal with minimizing
anything!  CloudFlare offers the options to minimize things for you (and
bypass that when needed).  This means that my development workflow is quite a
bit easier.  This pretty much negates my
&lt;a href=&#34;https://mtik00.com/2015/08/testing-pipelined-static-content/&#34;&gt;
Testing Pipelined Static Content&lt;/a&gt; post!&lt;/p&gt;

&lt;h1 id=&#34;steps:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Steps&lt;/h1&gt;

&lt;p&gt;Full disclosure: Most of these steps are already online, so you could also
Google them too.&lt;/p&gt;

&lt;h2 id=&#34;cloudflare:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;CloudFlare&lt;/h2&gt;

&lt;p&gt;The first step was to sign up for a CloudFlare account.  That was easy.  During
the setup procress, CloudFlare figured out all of the DNS records I was using
(name servers, mail records, etc).  CloudFlare automatically sets them up as
one would expect.  For example, the &lt;code&gt;MX&lt;/code&gt; records were left alone (which is
exactly what you want).  CloudFlare then tells you what to change on your
registrar.  This makes it so all domain name lookups go through CloudFlare&amp;rsquo;s
DNS.&lt;/p&gt;

&lt;h2 id=&#34;github:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;GitHub&lt;/h2&gt;

&lt;p&gt;The next step was to set up GitHub pages to know about our new domain.  This
is explained
&lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;
in GitHub&amp;rsquo;s online documentation&lt;/a&gt;.  Just a quick settings change and a new
&lt;code&gt;CNAME&lt;/code&gt; file.  One thing to note: you&amp;rsquo;ll want to add a &lt;code&gt;.nojekyll&lt;/code&gt; file to your
pages folder if you aren&amp;rsquo;t using Jekyll.
&lt;a href=&#34;https://github.com/blog/572-bypassing-jekyll-on-github-pages&#34;&gt;(this is
the best link I found for that)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;wait:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Wait&lt;/h2&gt;

&lt;p&gt;Now you wait!  &lt;code&gt;DNS&lt;/code&gt; changes take a while to propogate through the system.  It
took my work network a full day to pick up the change; my home network only took
a few hours.  You&amp;rsquo;ll know its been changed on your network when you run
&lt;code&gt;nslookup &amp;lt;domain&amp;gt;&lt;/code&gt; and the result points to CloudFlare DNS.&lt;/p&gt;

&lt;h2 id=&#34;back-to-cloudflare:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Back to CloudFlare&lt;/h2&gt;

&lt;p&gt;By now, you should be serving your content through CloudFlare connected to
GitHub.  There are some settings in CloudFlare that you may want to enable:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SSL Full&lt;/code&gt;: On the &lt;strong&gt;Crypto&lt;/strong&gt; page, you can set your &lt;code&gt;SSL&lt;/code&gt; to &lt;code&gt;Full&lt;/code&gt;.  This
will encrypt the connection between CloudFlare and GitHub.  NOTE: You cannot
use &lt;code&gt;Full (strict)&lt;/code&gt; because your hostname is different from GitHub!  You&amp;rsquo;ll
get errors and your site won&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Browser Cache Expiration&lt;/code&gt;: On the &lt;strong&gt;Caching&lt;/strong&gt; page, you can now set the
cache expiration.  If you use &lt;em&gt;cache busting&lt;/em&gt; techniques, you can set this
to something in the far future, like &amp;ldquo;6 months&amp;rdquo; or &amp;ldquo;1 year&amp;rdquo;.
&lt;code&gt;Always Online&lt;/code&gt; is an interesting one too.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto Minify&lt;/code&gt;: This is a handy feature on the &lt;strong&gt;Speed&lt;/strong&gt; page.  I have
CloudFlare automatically minify my JavaScript, CSS, and HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Always Use HTTPS&lt;/code&gt;: I like always redirecting to HTTPS.  AFter all, this is
one of the reasons I&amp;rsquo;m using CloudFlare.  I&amp;rsquo;ve created a rule on the &lt;strong&gt;Page Rules&lt;/strong&gt;
page to always use https for &lt;code&gt;http://mtik00.com/*&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NOTE: These changes take affect immediately(-ish).&lt;/p&gt;

&lt;h1 id=&#34;ssl:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;SSL&lt;/h1&gt;

&lt;p&gt;SSL/TLS is the biggest change.  I&amp;rsquo;m no longer encrypting &lt;code&gt;mtik00.com&lt;/code&gt; with
Let&amp;rsquo;s Encrypt.  This is because of 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visitors are presented with CloudFlare&amp;rsquo;s SSL certificate&lt;/li&gt;
&lt;li&gt;CloudFlare communicates directly to GitHub using GitHub&amp;rsquo;s SSL certificate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;mtik00.com&lt;/code&gt; is no long providing any SSL.  That should make sense since &lt;code&gt;mtik00.com&lt;/code&gt;
is really a &lt;em&gt;virtual&lt;/em&gt; thing now.  All of the content is served by GitHub and
cached by CloudFlare.&lt;/p&gt;

&lt;h1 id=&#34;posting-process:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Posting Process&lt;/h1&gt;

&lt;p&gt;My process of creating a post is identical to before (thanks to scripting).
The only think I took out from my deployment script was the minification of
things.&lt;/p&gt;

&lt;h1 id=&#34;caveats:99d742c51e999a9338a91c7e4c1114b1&#34;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;Here are some things to consider when choosing this method.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any DNS changes you need (e.g. &lt;code&gt;SPF&lt;/code&gt;, &lt;code&gt;DKIM&lt;/code&gt;, etc) will need to changed
on CloudFlare&amp;rsquo;s &lt;strong&gt;DNS&lt;/strong&gt; settings page.&lt;/li&gt;
&lt;li&gt;Your site will &lt;strong&gt;NOT&lt;/strong&gt; use your certificate (unless you pay CloudFlare to
manage one).  This is not the solution to use a domain-verified certificate.&lt;/li&gt;
&lt;li&gt;This is mainly &lt;em&gt;fire and forget&lt;/em&gt;.  Don&amp;rsquo;t forget how things are set up!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Django and Cripsy Form Login with Icons</title>
      <link>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</link>
      <pubDate>Sun, 30 Aug 2015 21:55:57 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/django-and-cripsy-form-login-with-icons/</guid>
      <description>&lt;p&gt;I recently created a website using the very nice &lt;a href=&#34;http://django-edge.readthedocs.org/en/latest/&#34;&gt;Edge&lt;/a&gt; template for a new Django site.  The log in form was nice, but I wanted a form with icons and no labels.  Here&amp;rsquo;s how I did it&amp;hellip;&lt;/p&gt;

&lt;p&gt;The greatest thing is that this was a &lt;em&gt;super easy&lt;/em&gt; change.  I think it looks a lot nicer, to boot.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the old login page looked like:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-before.png&#34; alt=&#34;Default edge login template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I used the incredible &lt;a href=&#34;http://django-crispy-forms.readthedocs.org/en/d-0/layouts.html?highlight=prependedtext&#34;&gt;&lt;code&gt;PrependedText&lt;/code&gt;&lt;/a&gt; FormHelper item to add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt; icon before the field.  I had to set the field labels to empty-strings, as I:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Couldn&amp;rsquo;t figure out the &lt;code&gt;Field&lt;/code&gt; item to set inside &lt;code&gt;PrependedText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Couldn&amp;rsquo;t use &lt;code&gt;self.helper.form_show_labels = False&lt;/code&gt; because I needed it for the &lt;code&gt;remember_me&lt;/code&gt; field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the python code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color: #007020&#34;&gt;super&lt;/span&gt;(LoginForm, &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06287e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;kwargs)
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;helper &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; FormHelper()
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;helper&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;layout &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Layout(
            PrependedText(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;i class=&amp;quot;fa fa-envelope-o&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;, placeholder&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Enter Email Address&amp;quot;&lt;/span&gt;),
            PrependedText(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;i class=&amp;quot;fa fa-key&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;, placeholder&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Enter Password&amp;quot;&lt;/span&gt;),
            HTML(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;a href=&amp;quot;{}&amp;quot;&amp;gt;Forgot Password?&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(
                reverse(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;accounts:password-reset&amp;quot;&lt;/span&gt;))),
            Field(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;remember_me&amp;#39;&lt;/span&gt;),
            Submit(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sign_in&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Log in&amp;#39;&lt;/span&gt;,
                   css_class&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;btn btn-lg btn-primary btn-block&amp;quot;&lt;/span&gt;),
        )
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the new login form:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mtik00.com/media/login-after.png&#34; alt=&#34;New log in template&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The is subtle, but effective!  (I think so, anyways)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Pipelined Static Content</title>
      <link>https://mtik00.com/2015/08/testing-pipelined-static-content/</link>
      <pubDate>Mon, 10 Aug 2015 20:57:46 -0600</pubDate>
      
      <guid>https://mtik00.com/2015/08/testing-pipelined-static-content/</guid>
      <description>&lt;p&gt;After working quite hard on my &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; Hugo pipeline, I needed a way to test the actual content that will be pushed to the server.  Python (once again) to the rescue!&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; love Hugo&amp;rsquo;s built-in server.  &lt;code&gt;hugo serve --watch&lt;/code&gt; is truly a great time saver.  However, it has nothing to do with our pipeline (fingerprinting, compressing, etc).  If we want to see what the end result is going to look like, we need a way to serve that content.&lt;/p&gt;

&lt;p&gt;Python has many built-in packages.  That&amp;rsquo;s the main reason it&amp;rsquo;s my language of choice.  Python has a simple web server ready to go.  I use &lt;code&gt;hugo serve --watch&lt;/code&gt; when I&amp;rsquo;m creating my content.  When I want to check the output of my pipeline, I use the following on the command-line:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cd &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;path to content&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;m SimpleHTTPServer &lt;span style=&#34;color: #40a070&#34;&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt; tells Python to load the SimpleHTTPServer module and serve the content it finds in the current working directory on port 8000.  Technically, you are running &lt;code&gt;SimpleHTTPServer.__main__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The great thing about this is that I can run both the Python server and the Hugo server at the same time, depending on what I need.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the batch file I use for this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;@&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; off
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%~dp0&lt;/span&gt;..

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;%1&lt;/span&gt;|findstr /xr &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &amp;gt;nul &amp;amp;&amp;amp; (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; :&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;python&lt;/span&gt;
) || (
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; :&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;hugo&lt;/span&gt;
)

:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: =============================================================================&lt;/span&gt;
:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: Run python on the already-built static pages.  This is for checking the end&lt;/span&gt;
:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: result of the pipeline to ensure everything worked.&lt;/span&gt;
:&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;python&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;pushd&lt;/span&gt; mtik00.github.io
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;start&lt;/span&gt; python -m SimpleHTTPServer 8000
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;popd&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; :&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;end&lt;/span&gt;
:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: =============================================================================&lt;/span&gt;

:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: =============================================================================&lt;/span&gt;
:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: Clean the Hugo build directory, then call Hugo to serve the content&lt;/span&gt;
:&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;hugo&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;EXIST&lt;/span&gt; build (
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;rmdir&lt;/span&gt; /q /s build
    sleep 1
)

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;start&lt;/span&gt; hugo server --watch --source=&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt; --bind=&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;goto&lt;/span&gt; :&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;end&lt;/span&gt;
:&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;: =============================================================================&lt;/span&gt;

:&lt;span style=&#34;color: #002070; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>